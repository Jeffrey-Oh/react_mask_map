{"version":3,"sources":["components/Header.js","modules/MaskMap.js","containers/MaskMapContainer.js","pages/MaskMapPage.js","App.js","modules/index.js","index.js"],"names":["TitleBar","styled","h1","Header","searchAction","createAction","searchSuccessAction","searchFailureAction","initialState","result","loading","error","handleActions","state","action","payload","maskAsync","lat","lng","dispatch","a","axios","get","params","m","data","stores","MapBox","div","geolocated","positionOptions","enableHighAccuracy","maximumAge","timeout","Infinity","watchPosition","props","pos","coords","latitude","longitude","React","useState","position","setPosition","useSelector","maskMapModule","useDispatch","useEffect","isGeolocationAvailable","isGeolocationEnabled","style","paddingTop","color","kakaoApiKey","initialPosition","level","onDragEnd","map","center","getCenter","Ha","Ga","item","index","remain_stat","key","onClick","alert","name","Container","MaskMapPage","App","combineReducers","logger","createLogger","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReduxThunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bbbf7148.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TitleBar = styled.h1`\r\nbackground-color: #173647;\r\ntext-align: center;\r\ncolor: #fff;\r\nfont-size: 18px;\r\nheight: 36px;\r\nline-height: 36px;\r\nwidth: 100%;\r\nposition: fixed;\r\nleft: 0;\r\ntop: 0;\r\n`;\r\n\r\nconst Header = () => {\r\n    return <TitleBar>Mask Map</TitleBar>\r\n};\r\n\r\nexport default Header;","import { handleActions, createAction } from 'redux-actions';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * 1) 액션 - 컴포넌트가 겪는 상황을 구분하는 문자열 값\r\n * \"파일이름/상황이름\" 값을 지정하면 다른 모듈과 Action값이 충돌하는 것을 방지할 수 있다.\r\n * Ajax 연동 기능 하나당 3개의 액션 정의\r\n * --> 목록을 가져오는 중, 목록 가져오기 성공, 목록 가져오기 실패\r\n */\r\nconst SEARCH = 'maskMap/SEARCH';\r\nconst SEARCH_SUCCESS = 'maskMap/SEARCH_SUCCESS';\r\nconst SEARCH_FAILURE = 'maskMap/SEARCH_FAILURE';\r\n\r\n/**\r\n * 2) 액션 생성 함수 - 액션 객체를 만들어서 리턴한다.\r\n * 컴포넌트에 대한 액션 값의 수 만큼 정의한다.\r\n *  --> createAction() 함수를 통해 함수 정의를 자동화\r\n */\r\nexport const searchAction          = createAction(SEARCH);\r\nexport const searchSuccessAction   = createAction(SEARCH_SUCCESS);\r\nexport const searchFailureAction   = createAction(SEARCH_FAILURE);\r\n\r\n/**\r\n * 3) 상태값 - 단순한 json 객체.\r\n * 컴포넌트에서 다루고자 하는 데이터들을 포함한다.\r\n */\r\nconst initialState = {\r\n    result: [],         // 뉴스목록\r\n    loading: false,     // 현재 검색중인지 여부\r\n    error: false        // 에러 발생 여부\r\n};\r\n\r\n/**\r\n * 4) 리듀서를 활용하여 스토어에 연결할 Action 정의하기\r\n * 각각의 action값을 메서드로 갖는 객체 형태로 정의한다.\r\n * 각각의 메서드는 initialState와 동일한 구조를 갖는 객체를 리턴해야 한다.\r\n * --> 특별한 처리로직을 갖지 않고, 각 상황에 따라 상태값만 조작하여 리턴한다.\r\n *\r\n * 스토어로 생성하기 위해 handleActions()함수를 사용하여 리듀서와 상태값을 묶어서 내보낸다.\r\n * 이 객체를 /index.js가 import하여 스토어로 생성한다.\r\n */\r\nexport default handleActions(\r\n    {\r\n        [searchAction]: (state = initialState, action) => {\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        },\r\n        [searchSuccessAction]: (state = initialState, action) => {\r\n            return {\r\n                ...state,\r\n                // payload는 action함수를 호출할 때 전달하는 파라미터 객체 \r\n                result: action.payload.result,\r\n                loading: false\r\n            };\r\n        },\r\n        [searchFailureAction]: (state = initialState, action) => {\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload.error\r\n            };\r\n        }\r\n    },\r\n    initialState\r\n);\r\n\r\n/** 5) 비동기 작업을 수행할 함수 정의 */\r\n// 컨테이너로부터 pos라는 파라미터를 전달받는다. (파라미터는 개발자가 상황에 따라 정의함)\r\n// 이 안에서 action함수들을 dispatch(호출)한다\r\n// 이렇게 정의된 함수들은 컨테이너의 props에 포함된다.\r\nexport const maskAsync = (lat, lng) => async dispatch => {\r\n    // 검색을 시작했음을 알림\r\n    dispatch(searchAction());\r\n\r\n    // 검색어가 없을 경우 --> 검색결과를 0건으로 지정하영 Success를 호출한다\r\n    if (!lat || !lng) {\r\n        searchSuccessAction({ result: [] });\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const result = await axios.get('https://8oi9s0nnth.apigw.ntruss.com/corona19-masks/v1/storesByGeo/json', {\r\n            params: { lat: lat, lng: lng, m: 5000 }\r\n        });\r\n        // console.debug(result.data);\r\n        dispatch(searchSuccessAction({ result: result.data.stores }));\r\n    } catch (e) {\r\n        // console.error(e);\r\n        dispatch(searchFailureAction({ error: '검색에 실패했습니다.' }));\r\n    }\r\n};\r\n","import React from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\n/**\r\n * 위치정보 취득 컴포넌트\r\n * > yarn add react-geolocated\r\n * > https://no23reason.github.io/react-geolocated\r\n */\r\nimport { geolocated } from \"react-geolocated\";\r\n\r\n/**\r\n * 카카오 지도 컴포넌트\r\n */\r\nimport { Map, Marker, Overlay } from \"kakao-map-react\";\r\n\r\n// 'react-redux' 패키지에서 제공하는 hook 함수\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n// 모듈기능 참조\r\nimport * as maskMapModule from \"../modules/MaskMap\";\r\n\r\nconst MapBox = styled.div`\r\n  padding-top: 36px;\r\n  height: calc(100% - 36px);\r\n`;\r\n\r\nconst MaskMapContainer = props => {\r\n  // 지도에 적용할 위도, 경도값 추출\r\n  const pos = { lat: 37.485364210938236, lng: 126.89935858146922 };\r\n\r\n  // geolocation을 통해 위, 경도값 받기\r\n  if (props.coords) {\r\n\t  pos.lat = props.coords.latitude;\r\n\t  pos.lng = props.coords.longitude;\r\n  }\r\n\r\n  // 위치정보를 상태값으로 등록\r\n  const [position, setPosition] = React.useState(pos);\r\n  const [map, setMap] = React.useState();\r\n\r\n  /** Hook 기능을 통해 상태값 가져오기 */\r\n  const { result, loading, error } = useSelector(state => {\r\n\t  return {\r\n\t\t  ...state.maskMapModule\r\n\t  };\r\n  });\r\n\r\n  /** action함수를 dispatch 시키기 위한 기능 가져오기 */\r\n  const dispatch = useDispatch();\r\n\r\n  /** 최초 실행 시 Ajax 연동 */\r\n  React.useEffect( () => {\r\n\t  dispatch(maskMapModule.maskAsync(position.lat, position.lng));\r\n  }, []);\r\n\r\n  /** 지도 이동 시 Ajax 연동 */\r\n  React.useEffect( () => {\r\n\t  dispatch(maskMapModule.maskAsync(position.lat, position.lng));\r\n  }, [position]);\r\n\r\n  /** 위치 정보 사용 가능 여부 확인 */\r\n  if (!props.isGeolocationAvailable) {\r\n    return <MapBox> 디바이스가 위치 정보를 지원하지 않습니다. </MapBox>;\r\n  }\r\n\r\n  if (!props.isGeolocationEnabled) {\r\n    return <MapBox> 위치 정보 사용이 허용되지 않았습니다. </MapBox>;\r\n  }\r\n\r\n  if (!props.coords) {\r\n    return <MapBox> 사용 가능한 위치 정보가 없습니다. </MapBox>;\r\n  }\r\n\r\n  if (loading) {\r\n\t  return <h2 style={{ paddingTop: '36px', color: '#00f' }}>검색중입니다...</h2>;\r\n  }\r\n\r\n  if (error) {\r\n\t  return <h2 style={{ paddingTop: '36px', color: '#f00' }}>{error}</h2>;\r\n  }\r\n\r\n  return (\r\n    <MapBox>\r\n      <Map\r\n        kakaoApiKey=\"680ab974e5cb1353034d6d7f21f2ec44\"\r\n        initialPosition={{\r\n          longitude: position.lng,\r\n          latitude: position.lat,\r\n          level: 10\r\n        }}\r\n        //지도에 표시되는 위치가 변경된 경우\r\n        onDragEnd={map => {\r\n          const center = map.getCenter();\r\n          setPosition({\r\n            lat : center.Ha,\r\n            lng : center.Ga\r\n          });\r\n        }}\r\n        center={{\r\n          longitude: position.lng,\r\n          latitude: position.lat\r\n        }}\r\n      >\r\n        \r\n\t\t{/** 검색결과 데이터 수 만큼 목록의 아이템을 표시함 */}\r\n\t\t{result.map((item, index) => {\r\n\t\t\r\n\t\t\t// 100개 이상(녹색): 'plenty' / 30개 이상 100개미만(노랑색): 'some' / 2개 이상 30개 미만(빨강색): 'few' / 1개 이하(회색): 'empty' / 판매중지: 'break'\r\n\t\t\tlet color = null, state = null;\r\n\r\n\t\t\tswitch (item.remain_stat) {\r\n\t\t\t\tcase 'plenty':\r\n\t\t\t\t\tcolor = 'green';\r\n\t\t\t\t\tstate = '100개 이상';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'some':\r\n\t\t\t\t\tcolor = 'yellow';\r\n\t\t\t\t\tstate = '30개 이상 100개 미만';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'few':\r\n\t\t\t\t\tcolor = 'red';\r\n\t\t\t\t\tstate = '2개 이상 30개 미만';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'empty':\r\n\t\t\t\t\tcolor = 'grey';\r\n\t\t\t\t\tstate = '1개 이하';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tcolor = 'black';\r\n\t\t\t\t\tstate = '판매중단';\r\n\t\t\t}\r\n\r\n\t\t\treturn(<Marker key={index}\r\n\t\t\t\t\tlongitude={item.lng}\r\n\t\t\t\t\tlatitude={item.lat}\r\n\t\t\t\t\tonClick={() => { alert(`${item.name} / ${state}`); }}\r\n\t\t\t\t/>);\r\n\t\t})}\r\n      </Map>\r\n    </MapBox>\r\n  );\r\n};\r\n\r\n/**\r\n * 위치정보 취득 옵션 설정\r\n * HTML5의 Geolocation API에 기반함\r\n */\r\n\r\nexport default geolocated({\r\n  positionOptions: {\r\n    enableHighAccuracy: true, // 높은 정확도 사용\r\n    maximumAge: 0, // 캐시유효시간(사용안함)\r\n    timeout: Infinity // 타임아웃(무한대로 설정)\r\n  },\r\n  watchPosition: true // 이동하는 동안 위치 추적 사용\r\n})(MaskMapContainer);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Header from '../components/Header';\r\nimport MapContainer from '../containers/MaskMapContainer';\r\n\r\nconst Container = styled.div`\r\nwidth: 100%;\r\nheight: 100%;\r\n`;\r\n\r\nconst MaskMapPage = () => {\r\n    return (\r\n        <Container>\r\n            <Header />\r\n            <MapContainer />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default MaskMapPage;","import React from 'react';\r\nimport MaskMapPage from './pages/MaskMapPage';\r\nimport './style.css';\r\n\r\nfunction App() {\r\n  return <MaskMapPage />;\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from 'redux';\r\nimport maskMapModule from './MaskMap';\r\n\r\nexport default combineReducers({\r\n    maskMapModule\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\n/** 리덕스를 위한 참조 추가 */\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { createLogger } from 'redux-logger';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport rootReducer from './modules';\r\n\r\n/** 리덕스 스토어 생성 */\r\nconst logger = createLogger();\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(logger, ReduxThunk)));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n      <BrowserRouter>\r\n          <App />\r\n      </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}